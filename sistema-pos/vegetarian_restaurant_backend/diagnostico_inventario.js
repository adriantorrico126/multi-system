const { pool } = require('./src/config/database');

async function diagnosticoInventario() {
  const client = await pool.connect();
  try {
    console.log('üîç DIAGN√ìSTICO COMPLETO DEL SISTEMA DE INVENTARIO\n');
    
    // 1. VERIFICAR EXISTENCIA DE TABLAS
    console.log('1Ô∏è‚É£ VERIFICANDO EXISTENCIA DE TABLAS...');
    
    const tablasInventario = [
      'inventario_lotes',
      'categorias_almacen',
      'movimientos_inventario',
      'alertas_inventario'
    ];
    
    for (const tabla of tablasInventario) {
      try {
        const tableExists = await client.query(`
          SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name = $1
          );
        `, [tabla]);
        
        if (tableExists.rows[0].exists) {
          console.log(`  ‚úÖ Tabla ${tabla}: EXISTE`);
          
          // Contar registros
          const countResult = await client.query(`SELECT COUNT(*) as total FROM ${tabla}`);
          console.log(`     üìä Registros: ${countResult.rows[0].total}`);
        } else {
          console.log(`  ‚ùå Tabla ${tabla}: NO EXISTE`);
        }
      } catch (error) {
        console.log(`  ‚ö†Ô∏è Error verificando ${tabla}: ${error.message}`);
      }
    }
    
    // 2. VERIFICAR ESTRUCTURA DE TABLAS
    console.log('\n2Ô∏è‚É£ VERIFICANDO ESTRUCTURA DE TABLAS...');
    
    try {
      // Verificar estructura de inventario_lotes
      const estructuraLotes = await client.query(`
        SELECT column_name, data_type, is_nullable, column_default
        FROM information_schema.columns 
        WHERE table_name = 'inventario_lotes' 
        ORDER BY ordinal_position
      `);
      
      if (estructuraLotes.rows.length > 0) {
        console.log('  üìä Estructura de inventario_lotes:');
        estructuraLotes.rows.forEach(col => {
          console.log(`     - ${col.column_name}: ${col.data_type} ${col.is_nullable === 'NO' ? 'NOT NULL' : 'NULL'}`);
        });
      }
    } catch (error) {
      console.log(`  ‚ö†Ô∏è Error verificando estructura: ${error.message}`);
    }
    
    // 3. VERIFICAR DATOS DE PRODUCTOS
    console.log('\n3Ô∏è‚É£ VERIFICANDO DATOS DE PRODUCTOS...');
    
    try {
      const productos = await client.query(`
        SELECT 
          COUNT(*) as total_productos,
          COUNT(CASE WHEN stock_actual > 0 THEN 1 END) as con_stock,
          COUNT(CASE WHEN stock_actual = 0 THEN 1 END) as sin_stock,
          COUNT(CASE WHEN stock_actual <= 10 THEN 1 END) as stock_bajo,
          SUM(stock_actual) as stock_total,
          AVG(stock_actual) as stock_promedio
        FROM productos
        WHERE activo = true
      `);
      
      if (productos.rows.length > 0) {
        const p = productos.rows[0];
        console.log(`  üìä Total productos: ${p.total_productos}`);
        console.log(`  üìä Con stock: ${p.con_stock}`);
        console.log(`  üìä Sin stock: ${p.sin_stock}`);
        console.log(`  üìä Stock bajo (‚â§10): ${p.stock_bajo}`);
        console.log(`  üìä Stock total: ${p.stock_total || 0}`);
        console.log(`  üìä Stock promedio: ${Math.round(p.stock_promedio || 0)}`);
      }
    } catch (error) {
      console.log(`  ‚ö†Ô∏è Error verificando productos: ${error.message}`);
    }
    
    // 4. VERIFICAR LOTES EXISTENTES
    console.log('\n4Ô∏è‚É£ VERIFICANDO LOTES EXISTENTES...');
    
    try {
      const lotes = await client.query(`
        SELECT 
          COUNT(*) as total_lotes,
          COUNT(CASE WHEN cantidad_actual > 0 THEN 1 END) as lotes_activos,
          COUNT(CASE WHEN cantidad_actual = 0 THEN 1 END) as lotes_vacios,
          COUNT(CASE WHEN fecha_caducidad < NOW() THEN 1 END) as lotes_vencidos,
          COUNT(CASE WHEN fecha_caducidad < NOW() + INTERVAL '7 days' THEN 1 END) as lotes_por_vencer,
          COUNT(CASE WHEN fecha_caducidad < NOW() + INTERVAL '30 days' THEN 1 END) as lotes_proximo_vencer,
          SUM(cantidad_actual) as stock_total_lotes,
          AVG(cantidad_actual) as stock_promedio_lotes
        FROM inventario_lotes
        WHERE activo = true
      `);
      
      if (lotes.rows.length > 0) {
        const l = lotes.rows[0];
        console.log(`  üìä Total lotes: ${l.total_lotes}`);
        console.log(`  üìä Lotes activos: ${l.lotes_activos}`);
        console.log(`  üìä Lotes vac√≠os: ${l.lotes_vacios}`);
        console.log(`  üìä Lotes vencidos: ${l.lotes_vencidos}`);
        console.log(`  üìä Por vencer (7 d√≠as): ${l.lotes_por_vencer}`);
        console.log(`  üìä Pr√≥ximo vencer (30 d√≠as): ${l.lotes_proximo_vencer}`);
        console.log(`  üìä Stock total en lotes: ${l.stock_total_lotes || 0}`);
        console.log(`  üìä Stock promedio por lote: ${Math.round(l.stock_promedio_lotes || 0)}`);
      }
    } catch (error) {
      console.log(`  ‚ö†Ô∏è Error verificando lotes: ${error.message}`);
    }
    
    // 5. VERIFICAR MOVIMIENTOS DE INVENTARIO
    console.log('\n5Ô∏è‚É£ VERIFICANDO MOVIMIENTOS DE INVENTARIO...');
    
    try {
      const movimientos = await client.query(`
        SELECT 
          COUNT(*) as total_movimientos,
          COUNT(CASE WHEN tipo_movimiento = 'entrada' THEN 1 END) as entradas,
          COUNT(CASE WHEN tipo_movimiento = 'salida' THEN 1 END) as salidas,
          COUNT(CASE WHEN tipo_movimiento = 'ajuste' THEN 1 END) as ajustes,
          COUNT(CASE WHEN fecha_movimiento >= NOW() - INTERVAL '7 days' THEN 1 END) as ultimos_7_dias,
          COUNT(CASE WHEN fecha_movimiento >= NOW() - INTERVAL '30 days' THEN 1 END) as ultimos_30_dias
        FROM movimientos_inventario
      `);
      
      if (movimientos.rows.length > 0) {
        const m = movimientos.rows[0];
        console.log(`  üìä Total movimientos: ${m.total_movimientos}`);
        console.log(`  üìä Entradas: ${m.entradas}`);
        console.log(`  üìä Salidas: ${m.salidas}`);
        console.log(`  üìä Ajustes: ${m.ajustes}`);
        console.log(`  üìä √öltimos 7 d√≠as: ${m.ultimos_7_dias}`);
        console.log(`  üìä √öltimos 30 d√≠as: ${m.ultimos_30_dias}`);
      }
    } catch (error) {
      console.log(`  ‚ö†Ô∏è Error verificando movimientos: ${error.message}`);
    }
    
    // 6. VERIFICAR CATEGOR√çAS DE ALMAC√âN
    console.log('\n6Ô∏è‚É£ VERIFICANDO CATEGOR√çAS DE ALMAC√âN...');
    
    try {
      const categoriasAlmacen = await client.query(`
        SELECT 
          ca.id_categoria_almacen,
          ca.nombre,
          ca.tipo_almacen,
          ca.condiciones_especiales,
          ca.rotacion_recomendada,
          COUNT(il.id_lote) as total_lotes,
          SUM(il.cantidad_actual) as stock_total
        FROM categorias_almacen ca
        LEFT JOIN inventario_lotes il ON ca.id_categoria_almacen = il.id_categoria_almacen
        WHERE ca.activo = true
        GROUP BY ca.id_categoria_almacen, ca.nombre, ca.tipo_almacen, ca.condiciones_especiales, ca.rotacion_recomendada
        ORDER BY ca.nombre
      `);
      
      if (categoriasAlmacen.rows.length > 0) {
        console.log(`  üìä Categor√≠as de almac√©n encontradas: ${categoriasAlmacen.rows.length}`);
        categoriasAlmacen.rows.forEach(cat => {
          console.log(`     - ${cat.nombre} (${cat.tipo_almacen}): ${cat.total_lotes} lotes, ${cat.stock_total || 0} stock`);
        });
      } else {
        console.log('  ‚ö†Ô∏è No hay categor√≠as de almac√©n configuradas');
      }
    } catch (error) {
      console.log(`  ‚ö†Ô∏è Error verificando categor√≠as: ${error.message}`);
    }
    
    // 7. VERIFICAR ALERTAS DE INVENTARIO
    console.log('\n7Ô∏è‚É£ VERIFICANDO ALERTAS DE INVENTARIO...');
    
    try {
      const alertas = await client.query(`
        SELECT 
          COUNT(*) as total_alertas,
          COUNT(CASE WHEN resuelta = false THEN 1 END) as alertas_pendientes,
          COUNT(CASE WHEN nivel_urgencia = 'alta' THEN 1 END) as alertas_altas,
          COUNT(CASE WHEN nivel_urgencia = 'media' THEN 1 END) as alertas_medias,
          COUNT(CASE WHEN nivel_urgencia = 'baja' THEN 1 END) as alertas_bajas
        FROM alertas_inventario
      `);
      
      if (alertas.rows.length > 0) {
        const a = alertas.rows[0];
        console.log(`  üìä Total alertas: ${a.total_alertas}`);
        console.log(`  üìä Pendientes: ${a.alertas_pendientes}`);
        console.log(`  üìä Alta urgencia: ${a.alertas_altas}`);
        console.log(`  üìä Media urgencia: ${a.alertas_medias}`);
        console.log(`  üìä Baja urgencia: ${a.alertas_bajas}`);
      }
    } catch (error) {
      console.log(`  ‚ö†Ô∏è Error verificando alertas: ${error.message}`);
    }
    
    // 8. DIAGN√ìSTICO GENERAL
    console.log('\n8Ô∏è‚É£ DIAGN√ìSTICO GENERAL...');
    
    try {
      // Verificar si hay productos sin lotes
      const productosSinLotes = await client.query(`
        SELECT COUNT(*) as total
        FROM productos p
        LEFT JOIN inventario_lotes il ON p.id_producto = il.id_producto
        WHERE p.activo = true AND il.id_lote IS NULL
      `);
      
      // Verificar si hay lotes sin productos
      const lotesSinProductos = await client.query(`
        SELECT COUNT(*) as total
        FROM inventario_lotes il
        LEFT JOIN productos p ON il.id_producto = p.id_producto
        WHERE il.activo = true AND p.id_producto IS NULL
      `);
      
      console.log(`  üìä Productos sin lotes: ${productosSinLotes.rows[0].total}`);
      console.log(`  üìä Lotes sin productos: ${lotesSinProductos.rows[0].total}`);
      
      if (parseInt(productosSinLotes.rows[0].total) > 0) {
        console.log('  ‚ö†Ô∏è PROBLEMA: Hay productos sin lotes configurados');
      }
      
      if (parseInt(lotesSinProductos.rows[0].total) > 0) {
        console.log('  ‚ö†Ô∏è PROBLEMA: Hay lotes sin productos v√°lidos');
      }
      
    } catch (error) {
      console.log(`  ‚ö†Ô∏è Error en diagn√≥stico general: ${error.message}`);
    }
    
    // 9. RECOMENDACIONES
    console.log('\n9Ô∏è‚É£ RECOMENDACIONES...');
    
    console.log('  üí° Para un sistema de inventario profesional se recomienda:');
    console.log('     - Configurar categor√≠as de almac√©n');
    console.log('     - Establecer alertas autom√°ticas de stock bajo');
    console.log('     - Implementar sistema de rotaci√≥n FIFO/LIFO');
    console.log('     - Configurar notificaciones de caducidad');
    console.log('     - Establecer niveles m√≠nimos de stock');
    console.log('     - Implementar auditor√≠a de movimientos');
    
  } catch (error) {
    console.error('‚ùå Error en diagn√≥stico:', error);
  } finally {
    client.release();
    await pool.end();
  }
}

// Ejecutar diagn√≥stico
diagnosticoInventario()
  .then(() => {
    console.log('\nüèÅ Diagn√≥stico completado');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\nüí• Error en diagn√≥stico:', error);
    process.exit(1);
  });
