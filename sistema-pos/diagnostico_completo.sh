#!/bin/bash

echo "üîê DIAGN√ìSTICO COMPLETO DEL SISTEMA DE AUTENTICACI√ìN"
echo "==================================================="
echo ""

# Funci√≥n para mostrar secci√≥n
show_section() {
    echo ""
    echo "üìã $1"
    echo "$(printf '=%.0s' {1..50})"
}

# Funci√≥n para mostrar resultado
show_result() {
    if [ $1 -eq 0 ]; then
        echo "‚úÖ $2"
    else
        echo "‚ùå $2"
    fi
}

# 1. Verificar configuraci√≥n del entorno
show_section "CONFIGURACI√ìN DEL ENTORNO"

echo "Configurando variables de entorno del frontend..."
if [ -f "configurar_env.sh" ]; then
    chmod +x configurar_env.sh
    ./configurar_env.sh > /dev/null 2>&1
    show_result $? "Variables de entorno configuradas"
else
    echo "‚ùå Script de configuraci√≥n no encontrado"
fi

# 2. Verificar backend
show_section "ESTADO DEL BACKEND"

echo "Verificando si el backend est√° corriendo..."
if curl -s http://localhost:3000/health > /dev/null 2>&1; then
    echo "‚úÖ Backend corriendo en puerto 3000"
    
    # Verificar endpoints espec√≠ficos
    echo "Verificando endpoints de autenticaci√≥n..."
    
    # Login endpoint
    if curl -s -X POST http://localhost:3000/api/v1/auth/login \
        -H "Content-Type: application/json" \
        -d '{"username":"test","password":"test"}' \
        | grep -q "Usuario o contrase√±a incorrectos"; then
        echo "‚úÖ Endpoint de login funcionando"
    else
        echo "‚ùå Endpoint de login no funciona"
    fi
    
    # Validate endpoint
    if curl -s http://localhost:3000/api/v1/auth/validate \
        | grep -q "Unauthorized"; then
        echo "‚úÖ Endpoint de validaci√≥n funcionando"
    else
        echo "‚ùå Endpoint de validaci√≥n no funciona"
    fi
    
else
    echo "‚ùå Backend NO est√° corriendo"
    echo ""
    echo "üöÄ Para iniciar el backend:"
    echo "   cd sistema-pos/vegetarian_restaurant_backend"
    echo "   npm start"
    echo ""
fi

# 3. Verificar base de datos y usuarios
show_section "BASE DE DATOS Y USUARIOS"

echo "Verificando usuarios en la base de datos..."
if [ -f "crear_usuario_admin.sh" ]; then
    chmod +x crear_usuario_admin.sh
    ./crear_usuario_admin.sh > /dev/null 2>&1
    show_result $? "Usuarios verificados/creados"
else
    echo "‚ùå Script de usuarios no encontrado"
fi

# 4. Verificar frontend
show_section "ESTADO DEL FRONTEND"

echo "Verificando si el frontend est√° corriendo..."
if curl -s http://localhost:8080 > /dev/null 2>&1; then
    echo "‚úÖ Frontend corriendo en puerto 8080"
else
    echo "‚ùå Frontend NO est√° corriendo"
    echo ""
    echo "üöÄ Para iniciar el frontend:"
    echo "   cd sistema-pos/menta-resto-system-pro"
    echo "   npm run dev"
    echo ""
fi

# 5. Probar login
show_section "PRUEBA DE LOGIN"

echo "Probando login con credenciales por defecto..."
if [ -f "prueba_login.sh" ]; then
    chmod +x prueba_login.sh
    ./prueba_login.sh
else
    echo "‚ùå Script de prueba no encontrado"
fi

# 6. Verificar archivos del sistema
show_section "ARCHIVOS DEL SISTEMA"

files=(
    "sistema-pos/menta-resto-system-pro/src/context/AuthContext.tsx"
    "sistema-pos/menta-resto-system-pro/src/components/auth/LoginForm.tsx"
    "sistema-pos/menta-resto-system-pro/src/components/auth/ProtectedRoute.tsx"
    "sistema-pos/menta-resto-system-pro/src/pages/Login.tsx"
    "sistema-pos/menta-resto-system-pro/src/pages/Index.tsx"
    "sistema-pos/vegetarian_restaurant_backend/src/routes/authRoutes.js"
    "sistema-pos/vegetarian_restaurant_backend/src/controllers/authController.js"
)

for file in "${files[@]}"; do
    if [ -f "$file" ]; then
        echo "‚úÖ $file"
    else
        echo "‚ùå $file - FALTANTE"
    fi
done

# 7. Resumen final
show_section "RESUMEN Y RECOMENDACIONES"

echo "üéØ ESTADO DEL SISTEMA:"
echo ""

# Verificar si todo est√° funcionando
backend_running=$(curl -s http://localhost:3000/health > /dev/null 2>&1 && echo "true" || echo "false")
frontend_running=$(curl -s http://localhost:8080 > /dev/null 2>&1 && echo "true" || echo "false")

if [ "$backend_running" = "true" ] && [ "$frontend_running" = "true" ]; then
    echo "‚úÖ Sistema completamente operativo"
    echo "‚úÖ Backend y frontend corriendo"
    echo "‚úÖ Archivos del sistema presentes"
    echo ""
    echo "üöÄ PR√ìXIMOS PASOS:"
    echo "   1. Abre http://localhost:8080 en tu navegador"
    echo "   2. Usa las credenciales: admin / admin"
    echo "   3. Si hay problemas, revisa la consola del navegador"
    
elif [ "$backend_running" = "true" ] && [ "$frontend_running" = "false" ]; then
    echo "‚ö†Ô∏è  Backend funcionando, frontend no iniciado"
    echo ""
    echo "üöÄ SOLUCI√ìN:"
    echo "   1. Inicia el frontend: cd sistema-pos/menta-resto-system-pro && npm run dev"
    echo "   2. Espera a que cargue completamente"
    echo "   3. Abre http://localhost:8080"
    
elif [ "$backend_running" = "false" ] && [ "$frontend_running" = "true" ]; then
    echo "‚ö†Ô∏è  Frontend funcionando, backend no iniciado"
    echo ""
    echo "üöÄ SOLUCI√ìN:"
    echo "   1. Inicia el backend: cd sistema-pos/vegetarian_restaurant_backend && npm start"
    echo "   2. Espera a que cargue completamente"
    echo "   3. Refresca el navegador"
    
else
    echo "‚ùå Ni backend ni frontend est√°n corriendo"
    echo ""
    echo "üöÄ SOLUCI√ìN COMPLETA:"
    echo "   1. Terminal 1: cd sistema-pos/vegetarian_restaurant_backend && npm start"
    echo "   2. Terminal 2: cd sistema-pos/menta-resto-system-pro && npm run dev"
    echo "   3. Espera a que ambos carguen completamente"
    echo "   4. Abre http://localhost:8080"
fi

echo ""
echo "üîß COMANDOS √öTILES:"
echo "   - Reiniciar backend: Ctrl+C, luego npm start"
echo "   - Reiniciar frontend: Ctrl+C, luego npm run dev"
echo "   - Limpiar cach√© del navegador: Ctrl+Shift+R"
echo "   - Ver logs del backend: Revisa la consola donde corre npm start"
echo "   - Ver logs del frontend: Revisa la consola del navegador (F12)"
echo ""
echo "üìû SI EL PROBLEMA PERSISTE:"
echo "   1. Ejecuta: ./diagnostico_login.sh"
echo "   2. Ejecuta: ./prueba_login.sh"
echo "   3. Revisa los logs de ambos servicios"
echo "   4. Verifica que no hay conflictos de puertos"
echo ""
echo "‚úÖ Diagn√≥stico completado!"

echo "üîê DIAGN√ìSTICO COMPLETO DEL SISTEMA DE AUTENTICACI√ìN"
echo "==================================================="
echo ""

# Funci√≥n para mostrar secci√≥n
show_section() {
    echo ""
    echo "üìã $1"
    echo "$(printf '=%.0s' {1..50})"
}

# Funci√≥n para mostrar resultado
show_result() {
    if [ $1 -eq 0 ]; then
        echo "‚úÖ $2"
    else
        echo "‚ùå $2"
    fi
}

# 1. Verificar configuraci√≥n del entorno
show_section "CONFIGURACI√ìN DEL ENTORNO"

echo "Configurando variables de entorno del frontend..."
if [ -f "configurar_env.sh" ]; then
    chmod +x configurar_env.sh
    ./configurar_env.sh > /dev/null 2>&1
    show_result $? "Variables de entorno configuradas"
else
    echo "‚ùå Script de configuraci√≥n no encontrado"
fi

# 2. Verificar backend
show_section "ESTADO DEL BACKEND"

echo "Verificando si el backend est√° corriendo..."
if curl -s http://localhost:3000/health > /dev/null 2>&1; then
    echo "‚úÖ Backend corriendo en puerto 3000"
    
    # Verificar endpoints espec√≠ficos
    echo "Verificando endpoints de autenticaci√≥n..."
    
    # Login endpoint
    if curl -s -X POST http://localhost:3000/api/v1/auth/login \
        -H "Content-Type: application/json" \
        -d '{"username":"test","password":"test"}' \
        | grep -q "Usuario o contrase√±a incorrectos"; then
        echo "‚úÖ Endpoint de login funcionando"
    else
        echo "‚ùå Endpoint de login no funciona"
    fi
    
    # Validate endpoint
    if curl -s http://localhost:3000/api/v1/auth/validate \
        | grep -q "Unauthorized"; then
        echo "‚úÖ Endpoint de validaci√≥n funcionando"
    else
        echo "‚ùå Endpoint de validaci√≥n no funciona"
    fi
    
else
    echo "‚ùå Backend NO est√° corriendo"
    echo ""
    echo "üöÄ Para iniciar el backend:"
    echo "   cd sistema-pos/vegetarian_restaurant_backend"
    echo "   npm start"
    echo ""
fi

# 3. Verificar base de datos y usuarios
show_section "BASE DE DATOS Y USUARIOS"

echo "Verificando usuarios en la base de datos..."
if [ -f "crear_usuario_admin.sh" ]; then
    chmod +x crear_usuario_admin.sh
    ./crear_usuario_admin.sh > /dev/null 2>&1
    show_result $? "Usuarios verificados/creados"
else
    echo "‚ùå Script de usuarios no encontrado"
fi

# 4. Verificar frontend
show_section "ESTADO DEL FRONTEND"

echo "Verificando si el frontend est√° corriendo..."
if curl -s http://localhost:8080 > /dev/null 2>&1; then
    echo "‚úÖ Frontend corriendo en puerto 8080"
else
    echo "‚ùå Frontend NO est√° corriendo"
    echo ""
    echo "üöÄ Para iniciar el frontend:"
    echo "   cd sistema-pos/menta-resto-system-pro"
    echo "   npm run dev"
    echo ""
fi

# 5. Probar login
show_section "PRUEBA DE LOGIN"

echo "Probando login con credenciales por defecto..."
if [ -f "prueba_login.sh" ]; then
    chmod +x prueba_login.sh
    ./prueba_login.sh
else
    echo "‚ùå Script de prueba no encontrado"
fi

# 6. Verificar archivos del sistema
show_section "ARCHIVOS DEL SISTEMA"

files=(
    "sistema-pos/menta-resto-system-pro/src/context/AuthContext.tsx"
    "sistema-pos/menta-resto-system-pro/src/components/auth/LoginForm.tsx"
    "sistema-pos/menta-resto-system-pro/src/components/auth/ProtectedRoute.tsx"
    "sistema-pos/menta-resto-system-pro/src/pages/Login.tsx"
    "sistema-pos/menta-resto-system-pro/src/pages/Index.tsx"
    "sistema-pos/vegetarian_restaurant_backend/src/routes/authRoutes.js"
    "sistema-pos/vegetarian_restaurant_backend/src/controllers/authController.js"
)

for file in "${files[@]}"; do
    if [ -f "$file" ]; then
        echo "‚úÖ $file"
    else
        echo "‚ùå $file - FALTANTE"
    fi
done

# 7. Resumen final
show_section "RESUMEN Y RECOMENDACIONES"

echo "üéØ ESTADO DEL SISTEMA:"
echo ""

# Verificar si todo est√° funcionando
backend_running=$(curl -s http://localhost:3000/health > /dev/null 2>&1 && echo "true" || echo "false")
frontend_running=$(curl -s http://localhost:8080 > /dev/null 2>&1 && echo "true" || echo "false")

if [ "$backend_running" = "true" ] && [ "$frontend_running" = "true" ]; then
    echo "‚úÖ Sistema completamente operativo"
    echo "‚úÖ Backend y frontend corriendo"
    echo "‚úÖ Archivos del sistema presentes"
    echo ""
    echo "üöÄ PR√ìXIMOS PASOS:"
    echo "   1. Abre http://localhost:8080 en tu navegador"
    echo "   2. Usa las credenciales: admin / admin"
    echo "   3. Si hay problemas, revisa la consola del navegador"
    
elif [ "$backend_running" = "true" ] && [ "$frontend_running" = "false" ]; then
    echo "‚ö†Ô∏è  Backend funcionando, frontend no iniciado"
    echo ""
    echo "üöÄ SOLUCI√ìN:"
    echo "   1. Inicia el frontend: cd sistema-pos/menta-resto-system-pro && npm run dev"
    echo "   2. Espera a que cargue completamente"
    echo "   3. Abre http://localhost:8080"
    
elif [ "$backend_running" = "false" ] && [ "$frontend_running" = "true" ]; then
    echo "‚ö†Ô∏è  Frontend funcionando, backend no iniciado"
    echo ""
    echo "üöÄ SOLUCI√ìN:"
    echo "   1. Inicia el backend: cd sistema-pos/vegetarian_restaurant_backend && npm start"
    echo "   2. Espera a que cargue completamente"
    echo "   3. Refresca el navegador"
    
else
    echo "‚ùå Ni backend ni frontend est√°n corriendo"
    echo ""
    echo "üöÄ SOLUCI√ìN COMPLETA:"
    echo "   1. Terminal 1: cd sistema-pos/vegetarian_restaurant_backend && npm start"
    echo "   2. Terminal 2: cd sistema-pos/menta-resto-system-pro && npm run dev"
    echo "   3. Espera a que ambos carguen completamente"
    echo "   4. Abre http://localhost:8080"
fi

echo ""
echo "üîß COMANDOS √öTILES:"
echo "   - Reiniciar backend: Ctrl+C, luego npm start"
echo "   - Reiniciar frontend: Ctrl+C, luego npm run dev"
echo "   - Limpiar cach√© del navegador: Ctrl+Shift+R"
echo "   - Ver logs del backend: Revisa la consola donde corre npm start"
echo "   - Ver logs del frontend: Revisa la consola del navegador (F12)"
echo ""
echo "üìû SI EL PROBLEMA PERSISTE:"
echo "   1. Ejecuta: ./diagnostico_login.sh"
echo "   2. Ejecuta: ./prueba_login.sh"
echo "   3. Revisa los logs de ambos servicios"
echo "   4. Verifica que no hay conflictos de puertos"
echo ""
echo "‚úÖ Diagn√≥stico completado!"


