const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîß CONFIGURANDO BACKEND...\n');

// Funci√≥n para crear archivo .env si no existe
function createEnvFile() {
  const envPath = path.join(__dirname, 'vegetarian_restaurant_backend', '.env');
  
  if (fs.existsSync(envPath)) {
    console.log('‚úÖ Archivo .env ya existe');
    return;
  }

  const envContent = `# Configuraci√≥n del servidor
NODE_ENV=development
PORT=3000
API_PREFIX=/api/v1

# Configuraci√≥n de la base de datos
DB_HOST=localhost
DB_USER=postgres
DB_PASSWORD=tu_password_aqui
DB_NAME=menta_restobar_db
DB_PORT=5432

# Configuraci√≥n de JWT
JWT_SECRET=tu_jwt_secret_muy_seguro_aqui_cambiar_en_produccion
`;

  try {
    // Crear directorio si no existe
    const envDir = path.dirname(envPath);
    if (!fs.existsSync(envDir)) {
      fs.mkdirSync(envDir, { recursive: true });
    }
    
    fs.writeFileSync(envPath, envContent);
    console.log('‚úÖ Archivo .env creado');
    console.log('‚ö†Ô∏è  IMPORTANTE: Edita el archivo .env con tus credenciales reales');
  } catch (error) {
    console.error('‚ùå Error creando archivo .env:', error.message);
  }
}

// Funci√≥n para verificar dependencias
function checkDependencies() {
  console.log('\nüì¶ Verificando dependencias...');
  
  const packagePath = path.join(__dirname, 'vegetarian_restaurant_backend', 'package.json');
  
  if (!fs.existsSync(packagePath)) {
    console.log('‚ùå package.json no encontrado');
    return false;
  }
  
  try {
    const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    console.log('‚úÖ package.json encontrado');
    console.log(`üìã Versi√≥n: ${packageJson.version}`);
    console.log(`üì¶ Dependencias: ${Object.keys(packageJson.dependencies || {}).length}`);
    return true;
  } catch (error) {
    console.error('‚ùå Error leyendo package.json:', error.message);
    return false;
  }
}

// Funci√≥n para verificar PostgreSQL
function checkPostgreSQL() {
  console.log('\nüóÑÔ∏è  Verificando PostgreSQL...');
  
  try {
    // Verificar si psql est√° disponible
    execSync('psql --version', { stdio: 'pipe' });
    console.log('‚úÖ PostgreSQL CLI disponible');
    
    // Intentar conectar a PostgreSQL
    try {
      execSync('psql -U postgres -c "SELECT version();"', { stdio: 'pipe' });
      console.log('‚úÖ Conexi√≥n a PostgreSQL exitosa');
      return true;
    } catch (error) {
      console.log('‚ö†Ô∏è  No se pudo conectar a PostgreSQL autom√°ticamente');
      console.log('üí° Aseg√∫rate de que PostgreSQL est√© ejecut√°ndose');
      return false;
    }
  } catch (error) {
    console.log('‚ùå PostgreSQL CLI no encontrado');
    console.log('üí° Instala PostgreSQL desde: https://www.postgresql.org/download/');
    return false;
  }
}

// Funci√≥n para verificar Node.js
function checkNodeJS() {
  console.log('\nüü¢ Verificando Node.js...');
  
  try {
    const nodeVersion = execSync('node --version', { encoding: 'utf8' }).trim();
    console.log(`‚úÖ Node.js ${nodeVersion} instalado`);
    
    const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
    console.log(`‚úÖ npm ${npmVersion} instalado`);
    
    return true;
  } catch (error) {
    console.log('‚ùå Node.js no encontrado');
    console.log('üí° Instala Node.js desde: https://nodejs.org/');
    return false;
  }
}

// Funci√≥n para crear script de instalaci√≥n autom√°tica
function createInstallScript() {
  const installScript = `#!/bin/bash
# Script de instalaci√≥n autom√°tica para el backend

echo "üöÄ Instalando dependencias del backend..."

# Navegar al directorio del backend
cd vegetarian_restaurant_backend

# Instalar dependencias
npm install

echo "‚úÖ Dependencias instaladas"

# Verificar que el archivo .env existe
if [ ! -f ".env" ]; then
    echo "‚ùå Archivo .env no encontrado"
    echo "üí° Ejecuta 'node setup_backend.js' desde la ra√≠z del proyecto"
    exit 1
fi

echo "‚úÖ Configuraci√≥n completada"
echo "üí° Para iniciar el servidor: npm start"
`;

  const scriptPath = path.join(__dirname, 'install_backend.sh');
  fs.writeFileSync(scriptPath, installScript);
  fs.chmodSync(scriptPath, '755');
  console.log('‚úÖ Script de instalaci√≥n creado: install_backend.sh');
}

// Funci√≥n para mostrar instrucciones
function showInstructions() {
  console.log('\nüìã INSTRUCCIONES PARA INICIAR EL BACKEND:');
  console.log('\n1. Edita el archivo .env con tus credenciales:');
  console.log('   cd vegetarian_restaurant_backend');
  console.log('   # Edita el archivo .env con tus credenciales reales');
  
  console.log('\n2. Crea la base de datos PostgreSQL:');
  console.log('   psql -U postgres -c "CREATE DATABASE menta_restobar_db;"');
  
  console.log('\n3. Ejecuta las migraciones de la base de datos:');
  console.log('   psql -U postgres -d menta_restobar_db -f create_mesa_tables.sql');
  
  console.log('\n4. Instala las dependencias:');
  console.log('   cd vegetarian_restaurant_backend');
  console.log('   npm install');
  
  console.log('\n5. Inicia el servidor:');
  console.log('   npm start');
  
  console.log('\n6. Verifica que todo funcione:');
  console.log('   node check_backend_startup.js');
  
  console.log('\nüí° O ejecuta el script autom√°tico:');
  console.log('   ./install_backend.sh');
}

// Funci√≥n para mostrar informaci√≥n del sistema
function showSystemInfo() {
  console.log('\nüìä INFORMACI√ìN DEL SISTEMA:');
  
  try {
    const os = require('os');
    console.log(`üñ•Ô∏è  Sistema Operativo: ${os.platform()} ${os.release()}`);
    console.log(`üíæ Memoria Total: ${Math.round(os.totalmem() / 1024 / 1024 / 1024)} GB`);
    console.log(`üìÅ Directorio Actual: ${process.cwd()}`);
  } catch (error) {
    console.log('‚ö†Ô∏è  No se pudo obtener informaci√≥n del sistema');
  }
}

// Ejecutar configuraci√≥n
async function setupBackend() {
  console.log('üöÄ INICIANDO CONFIGURACI√ìN DEL BACKEND...\n');
  
  // Mostrar informaci√≥n del sistema
  showSystemInfo();
  
  // 1. Verificar Node.js
  const nodeOk = checkNodeJS();
  
  // 2. Verificar PostgreSQL
  const pgOk = checkPostgreSQL();
  
  // 3. Crear archivo .env
  createEnvFile();
  
  // 4. Verificar dependencias
  const depsOk = checkDependencies();
  
  // 5. Crear script de instalaci√≥n
  createInstallScript();
  
  // 6. Mostrar instrucciones
  showInstructions();
  
  // Resumen final
  console.log('\nüìã RESUMEN DE CONFIGURACI√ìN:');
  console.log(`‚úÖ Node.js: ${nodeOk ? 'OK' : 'FALTA'}`);
  console.log(`‚úÖ PostgreSQL: ${pgOk ? 'OK' : 'FALTA'}`);
  console.log(`‚úÖ Dependencias: ${depsOk ? 'OK' : 'FALTA'}`);
  console.log('‚úÖ Archivo .env: CREADO');
  console.log('‚úÖ Script de instalaci√≥n: CREADO');
  
  if (nodeOk && pgOk && depsOk) {
    console.log('\nüéâ CONFIGURACI√ìN COMPLETADA EXITOSAMENTE');
    console.log('üí° Ejecuta "node check_backend_startup.js" para verificar todo');
  } else {
    console.log('\n‚ö†Ô∏è  Algunos problemas detectados');
    console.log('üí° Revisa los errores arriba y completa la configuraci√≥n manual');
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  setupBackend().catch(console.error);
}

module.exports = { setupBackend }; 